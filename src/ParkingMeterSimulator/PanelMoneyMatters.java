package ParkingMeterSimulator;

import java.io.File;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Scanner;
import java.util.Set;
import java.util.SortedSet;
import java.util.TreeSet;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author raoul
 */
public class PanelMoneyMatters extends javax.swing.JPanel {
    //declaring global variables

    private final HashMap<String, Integer> clientPayDenominationsMap = new HashMap<>();
    private final ArrayList<String> denominationReportItems = new ArrayList<>();
    double paymentAmount;

    /**
     * Creates new form PanelMoneyMatters
     */
    public PanelMoneyMatters() {
        initComponents();
        //making my outputs not editable 
        textInputPaymentFee.setEditable(false);
        textAreaPaymentBreakdown.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        textInputPaymentFee = new javax.swing.JTextField();
        panelClientPayment = new javax.swing.JPanel();
        spinnerCents10 = new javax.swing.JSpinner();
        labelDenomCents50 = new javax.swing.JLabel();
        labelDenomRand1 = new javax.swing.JLabel();
        spinnerRand1 = new javax.swing.JSpinner();
        labelDenomRand2 = new javax.swing.JLabel();
        spinnerRand2 = new javax.swing.JSpinner();
        labelDenomRand5 = new javax.swing.JLabel();
        labelDenomRand10 = new javax.swing.JLabel();
        spinnerRand5 = new javax.swing.JSpinner();
        spinnerRand10 = new javax.swing.JSpinner();
        labelDenomRand20 = new javax.swing.JLabel();
        spinnerRand20 = new javax.swing.JSpinner();
        labelDenomRand50 = new javax.swing.JLabel();
        spinnerRand50 = new javax.swing.JSpinner();
        labelDenomRand51 = new javax.swing.JLabel();
        spinnerRand100 = new javax.swing.JSpinner();
        labelDenomRand52 = new javax.swing.JLabel();
        spinnerRand200 = new javax.swing.JSpinner();
        labelDenomCents51 = new javax.swing.JLabel();
        spinnerCents20 = new javax.swing.JSpinner();
        spinnerCents50 = new javax.swing.JSpinner();
        labelDenomCents52 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        textFieldTotalPayment = new javax.swing.JTextField();
        textAreaPaymentBreakdown = new java.awt.TextArea();
        jLabel6 = new javax.swing.JLabel();
        ButtonCalc = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jSpinner1 = new javax.swing.JSpinner();
        jPanel5 = new javax.swing.JPanel();
        jSpinner2 = new javax.swing.JSpinner();
        buttonClientPay = new javax.swing.JButton();
        Admin = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(153, 51, 0), null, null));
        setMinimumSize(new java.awt.Dimension(300, 300));
        setName("ParkingSweepWindow"); // NOI18N

        jPanel1.setBackground(new java.awt.Color(248, 148, 6));

        jLabel1.setFont(new java.awt.Font("Calisto MT", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Parking Payment System");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(306, 306, 306))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(36, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );

        jPanel2.setBackground(new java.awt.Color(108, 122, 137));

        textInputPaymentFee.setBackground(new java.awt.Color(108, 122, 137));
        textInputPaymentFee.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        textInputPaymentFee.setForeground(new java.awt.Color(255, 255, 255));
        textInputPaymentFee.setText("R");
        textInputPaymentFee.setToolTipText("The required fee for the parking duration");

        panelClientPayment.setBackground(new java.awt.Color(108, 122, 137));
        panelClientPayment.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Client Payment Selection", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18), new java.awt.Color(255, 255, 255))); // NOI18N

        labelDenomCents50.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        labelDenomCents50.setForeground(new java.awt.Color(255, 255, 255));
        labelDenomCents50.setText("R 0.10");

        labelDenomRand1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        labelDenomRand1.setForeground(new java.awt.Color(255, 255, 255));
        labelDenomRand1.setText("R 1.00");

        labelDenomRand2.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        labelDenomRand2.setForeground(new java.awt.Color(255, 255, 255));
        labelDenomRand2.setText("R 2.00");

        labelDenomRand5.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        labelDenomRand5.setForeground(new java.awt.Color(255, 255, 255));
        labelDenomRand5.setText("R 5.00");

        labelDenomRand10.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        labelDenomRand10.setForeground(new java.awt.Color(255, 255, 255));
        labelDenomRand10.setText("R 10.00");

        labelDenomRand20.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        labelDenomRand20.setForeground(new java.awt.Color(255, 255, 255));
        labelDenomRand20.setText("R 20.00");

        labelDenomRand50.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        labelDenomRand50.setForeground(new java.awt.Color(255, 255, 255));
        labelDenomRand50.setText("R 50.00");

        labelDenomRand51.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        labelDenomRand51.setForeground(new java.awt.Color(255, 255, 255));
        labelDenomRand51.setText("R 100.00");

        labelDenomRand52.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        labelDenomRand52.setForeground(new java.awt.Color(255, 255, 255));
        labelDenomRand52.setText("R 200.00");

        labelDenomCents51.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        labelDenomCents51.setForeground(new java.awt.Color(255, 255, 255));
        labelDenomCents51.setText("R 0.20");

        labelDenomCents52.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        labelDenomCents52.setForeground(new java.awt.Color(255, 255, 255));
        labelDenomCents52.setText("R 0.50");

        javax.swing.GroupLayout panelClientPaymentLayout = new javax.swing.GroupLayout(panelClientPayment);
        panelClientPayment.setLayout(panelClientPaymentLayout);
        panelClientPaymentLayout.setHorizontalGroup(
            panelClientPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelClientPaymentLayout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addGroup(panelClientPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(spinnerRand5, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinnerRand2, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelClientPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(panelClientPaymentLayout.createSequentialGroup()
                            .addGroup(panelClientPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(panelClientPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(labelDenomRand20)
                                    .addComponent(labelDenomRand50))
                                .addComponent(labelDenomRand51)
                                .addComponent(labelDenomRand52)
                                .addComponent(labelDenomRand10))
                            .addGap(61, 61, 61)
                            .addGroup(panelClientPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(spinnerRand10, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                                .addComponent(spinnerRand20)
                                .addComponent(spinnerRand50)
                                .addComponent(spinnerRand100)
                                .addComponent(spinnerRand200)))
                        .addGroup(panelClientPaymentLayout.createSequentialGroup()
                            .addGroup(panelClientPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(labelDenomRand1)
                                .addComponent(labelDenomCents50)
                                .addComponent(labelDenomRand2)
                                .addComponent(labelDenomRand5)
                                .addComponent(labelDenomCents51)
                                .addComponent(labelDenomCents52))
                            .addGap(69, 77, Short.MAX_VALUE)
                            .addGroup(panelClientPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(spinnerCents10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(spinnerRand1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(spinnerCents20, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(spinnerCents50, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(102, 102, 102))
        );
        panelClientPaymentLayout.setVerticalGroup(
            panelClientPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelClientPaymentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelClientPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelDenomCents50)
                    .addComponent(spinnerCents10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelClientPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerCents20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelDenomCents51))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelClientPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerCents50, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelDenomCents52))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelClientPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(spinnerRand1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelDenomRand1))
                .addGap(16, 16, 16)
                .addGroup(panelClientPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerRand2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelDenomRand2))
                .addGap(18, 18, 18)
                .addGroup(panelClientPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelDenomRand5)
                    .addComponent(spinnerRand5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(panelClientPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelDenomRand10)
                    .addComponent(spinnerRand10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelClientPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelDenomRand20)
                    .addComponent(spinnerRand20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelClientPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelDenomRand50)
                    .addComponent(spinnerRand50, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelClientPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelDenomRand51)
                    .addComponent(spinnerRand100, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelClientPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelDenomRand52)
                    .addComponent(spinnerRand200, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(108, 122, 137));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Payment Information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18), new java.awt.Color(255, 255, 255))); // NOI18N

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Total payment");

        textFieldTotalPayment.setEditable(false);
        textFieldTotalPayment.setBackground(new java.awt.Color(108, 122, 137));
        textFieldTotalPayment.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        textFieldTotalPayment.setForeground(new java.awt.Color(255, 255, 255));
        textFieldTotalPayment.setText("R 0.00");
        textFieldTotalPayment.setToolTipText("");

        textAreaPaymentBreakdown.setBackground(new java.awt.Color(108, 122, 137));
        textAreaPaymentBreakdown.setEditable(false);
        textAreaPaymentBreakdown.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        textAreaPaymentBreakdown.setForeground(new java.awt.Color(255, 255, 255));

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Client payment breakdown");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textAreaPaymentBreakdown, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textFieldTotalPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5))
                        .addGap(0, 217, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textFieldTotalPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textAreaPaymentBreakdown, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
                .addContainerGap())
        );

        ButtonCalc.setBackground(new java.awt.Color(34, 167, 240));
        ButtonCalc.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        ButtonCalc.setForeground(new java.awt.Color(255, 255, 255));
        ButtonCalc.setText("Calculate Payment");
        ButtonCalc.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ButtonCalc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonCalcActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(192, 57, 43));
        jButton2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Clear");
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel4.setBackground(new java.awt.Color(108, 122, 137));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Entry Time", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(255, 255, 255))); // NOI18N

        jSpinner1.setModel(new javax.swing.SpinnerDateModel());

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(57, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        jPanel5.setBackground(new java.awt.Color(108, 122, 137));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Exit Time", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(255, 255, 255))); // NOI18N

        jSpinner2.setModel(new javax.swing.SpinnerDateModel());

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(62, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        buttonClientPay.setBackground(new java.awt.Color(34, 167, 240));
        buttonClientPay.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        buttonClientPay.setForeground(new java.awt.Color(255, 255, 255));
        buttonClientPay.setText("Make payment");
        buttonClientPay.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonClientPay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClientPayActionPerformed(evt);
            }
        });

        Admin.setBackground(new java.awt.Color(34, 167, 240));
        Admin.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Admin.setForeground(new java.awt.Color(255, 255, 255));
        Admin.setText("Admin");
        Admin.setMaximumSize(new java.awt.Dimension(0, 0));
        Admin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AdminActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(textInputPaymentFee, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ButtonCalc, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(33, 33, 33)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelClientPayment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonClientPay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(Admin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(panelClientPayment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(buttonClientPay, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                            .addComponent(textInputPaymentFee, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Admin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(9, 9, 9))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(ButtonCalc, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(151, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void AdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AdminActionPerformed

        try{
            File myFile = new File("ParkingDetails.txt");
            Scanner output = new Scanner(myFile);

            while(output.hasNext()){
                denominationReportItems.add(output.nextLine());
            }
        }catch(Exception ex){
            JOptionPane.showMessageDialog(null, ex.getMessage()+"ERROR"+JOptionPane.ERROR_MESSAGE);
        }

        //call table
        Table tableForm = new Table();
        tableForm.setVisible(true);

    }//GEN-LAST:event_AdminActionPerformed

    private void buttonClientPayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClientPayActionPerformed
        Date firstDate = (Date) jSpinner1.getModel().getValue();
        Date secondDate = (Date) jSpinner2.getModel().getValue();

        long timeDifference = secondDate.getTime() - firstDate.getTime();
        long differenceInDays = timeDifference/(24*60*1000) ;
        long parkingDurationHours = timeDifference/(60*60*1000)+1;
        long parkingDurationMinutes = timeDifference/(60*1000)%60;

        //Mapping each spinner to a unique monetary value
        clientPayDenominationsMap.clear();
        denominationReportItems.clear();

        clientPayDenominationsMap.put("0.10", (Integer) spinnerCents10.getValue());
        clientPayDenominationsMap.put("0.20", (Integer) spinnerCents20.getValue());
        clientPayDenominationsMap.put("0.50", (Integer) spinnerCents50.getValue());
        clientPayDenominationsMap.put("1.00", (Integer) spinnerRand1.getValue());
        clientPayDenominationsMap.put("2.00", (Integer) spinnerRand2.getValue());
        clientPayDenominationsMap.put("5.00", (Integer) spinnerRand5.getValue());
        clientPayDenominationsMap.put("10.00", (Integer) spinnerRand10.getValue());
        clientPayDenominationsMap.put("20.00", (Integer) spinnerRand20.getValue());
        clientPayDenominationsMap.put("50.00", (Integer) spinnerRand50.getValue());
        clientPayDenominationsMap.put("100.00", (Integer) spinnerRand100.getValue());
        clientPayDenominationsMap.put("200.00", (Integer) spinnerRand200.getValue());

        int clientPayTotal = calculateClientPayment(); // in cents
        showClientPayment(clientPayTotal);
        displayClientPaymentDenominations(clientPayDenominationsMap);

        /*calculating change
        *
        *declaring counter variables for each denominator
        *declaring amounts*/
        final double denom10c = 0.10;
        final double denom20c = 0.20;
        final double denom50c = 0.50;
        final double denomR1 = 1.00;
        final double denomR2 = 2.00;
        final double denomR5 = 5.00;
        final double denomR10 = 10.00;
        final double denomR20 = 20.00;
        final double denomR50 = 50.00;
        final double denomR100 = 100.00;
        final double denomR200 = 200.00;

        int denom10cCounter = 0;
        int denom20cCounter = 0;
        int denom50cCounter = 0;
        int denomR1Counter = 0;
        int denomR2Counter = 0;
        int denomR5Counter = 0;
        int denomR10Counter = 0;
        int denomR20Counter = 0;
        int denomR50Counter = 0;
        int denomR100Counter = 0;
        int denomR200Counter = 0;

        double total;
        double change;

        ArrayList list = new ArrayList();

        total = (Integer) spinnerCents10.getValue() * denom10c +
        (Integer) spinnerCents20.getValue() * denom20c +
        (Integer) spinnerCents50.getValue() * denom50c +
        (Integer) spinnerRand1.getValue() *   denomR1 +
        (Integer) spinnerRand2.getValue() *   denomR2 +
        (Integer) spinnerRand5.getValue() *   denomR5 +
        (Integer) spinnerRand10.getValue() *  denomR10 +
        (Integer) spinnerRand20.getValue() *  denomR20 +
        (Integer) spinnerRand50.getValue() *  denomR50 +
        (Integer) spinnerRand100.getValue()* denomR100 +
        (Integer) spinnerRand200.getValue()* denomR200;

        change = total-paymentAmount;

        if(total < paymentAmount)
        {
            JOptionPane.showMessageDialog(null, "Insufficient Funds.", "Error",JOptionPane.ERROR_MESSAGE);
        }
        else
        {

            textAreaPaymentBreakdown.append("Time:\n"+parkingDurationHours+" hour(s) and "+parkingDurationMinutes+" minute(s)"+"\nYour Change:\nR "+change+"\nDenominations"
                + "\n");
            double change2 = change;

            while(change != 0)
            {
                if(change >= denomR200)
                {
                    if(denomR200Counter != 0)
                    {
                        change = change - denomR200;
                        denomR200Counter++;
                        list.set(list.size()-1,"R 200.00x"+denomR200Counter );
                        continue;
                    }
                    else
                    {
                        change = change - denomR200;
                        denomR200Counter++;
                        list.add("R 200.00x"+denomR200Counter);
                        continue;
                    }

                }
                else if(change >= denomR100)
                {
                    if(denomR100Counter != 0)
                    {
                        change = change - denomR100;
                        denomR100Counter++;
                        list.set(list.size()-1,"R 100.00x"+denomR100Counter );
                        continue;
                    }
                    else
                    {
                        change = change - denomR100;
                        denomR100Counter++;
                        list.add("R 100.00x"+denomR100Counter);
                        continue;
                    }
                }
                else if(change >= denomR50)
                {

                    if(denomR50Counter != 0)
                    {
                        change = change - denomR50;
                        denomR50Counter++;
                        list.set(list.size()-1,"R 50.00x"+denomR50Counter );
                        continue;
                    }
                    else
                    {
                        change = change - denomR50;
                        denomR50Counter++;
                        list.add("R 50.00x"+denomR50Counter);
                        continue;
                    }
                }
                else if(change >= denomR20)
                {
                    if(denomR20Counter != 0)
                    {
                        change = change - denomR20;
                        denomR20Counter++;
                        list.set(list.size()-1,"R 20.00x"+denomR20Counter );
                        continue;
                    }
                    else
                    {
                        change = change - denomR20;
                        denomR20Counter++;
                        list.add("R 20.00x"+denomR20Counter);
                        continue;
                    }
                }
                else if(change >= denomR10)
                {
                    if(denomR10Counter != 0)
                    {
                        change = change - denomR10;
                        denomR10Counter++;
                        list.set(list.size()-1,"R 10.00x"+denomR10Counter );
                        continue;
                    }
                    else
                    {
                        change = change - denomR10;
                        denomR10Counter++;
                        list.add("R 10.00x"+denomR10Counter);
                        continue;
                    }
                }
                else if(change >= denomR5)
                {
                    if(denomR5Counter != 0)
                    {
                        change = change - denomR5;
                        denomR5Counter++;
                        list.set(list.size()-1,"R 5.00x"+denomR5Counter );
                        continue;
                    }
                    else
                    {
                        change = change - denomR5;
                        denomR5Counter++;
                        list.add("R 5.00x"+denomR5Counter);
                        continue;
                    }
                }
                else if(change >= denomR2)
                {
                    if(denomR2Counter != 0)
                    {
                        change = change - denomR2;
                        denomR2Counter++;
                        list.set(list.size()-1,"R 2.00x"+denomR2Counter );
                        continue;
                    }
                    else
                    {
                        change = change - denomR2;
                        denomR2Counter++;
                        list.add("R 2.00x"+denomR2Counter);
                        continue;
                    }
                }
                else if(change >= denomR1)
                {
                    change = change - denomR1;
                    denomR1Counter++;
                    list.add("R 1.00x"+denomR1Counter);
                    continue;
                }
                else if(change >= denom50c)
                {
                    if(denom50cCounter != 0)
                    {
                        change = change - denom50c;
                        denom50cCounter++;
                        list.set(list.size()-1,"R 0.50x"+denom50cCounter );
                        continue;
                    }
                    else
                    {
                        change = change - denom50c;
                        denom50cCounter++;
                        list.add("R 0.50x"+denom50cCounter);
                        continue;
                    }
                }
                else if(change >= denom20c)
                {
                    if(denom20cCounter != 0)
                    {
                        change = change - denom20c;
                        denom20cCounter++;
                        list.set(list.size()-1,"R 0.20x"+denom20cCounter );
                        continue;
                    }
                    else
                    {
                        change = change - denom20c;
                        denom20cCounter++;
                        list.add("R 0.20x"+denom20cCounter);
                        continue;
                    }
                }
                else if(change >= denom10c)
                {
                    if(denom10cCounter != 0)
                    {
                        change = change - denom10c;
                        denom10cCounter++;
                        list.set(list.size()-1,"R 0.10x"+denom10cCounter );
                        continue;
                    }
                    else
                    {
                        change = change - denom10c;
                        denom10cCounter++;
                        list.add("R 0.10x"+denom10cCounter);
                        continue;
                    }
                }
            }

            for(int i = 0;i <= list.size()-1;i++)
            {
                textAreaPaymentBreakdown.setText(textAreaPaymentBreakdown.getText()+list.get(i)+"\n");

            }
            //writing to textfile
            try
            {

                denominationReportItems.add(jSpinner1.getValue()+", "+jSpinner2.getValue()+", "+parkingDurationHours+" Hours and "+parkingDurationMinutes+" minutes"+", "+textInputPaymentFee.getText()+", "+total+0+", "+change2+0);

                PrintWriter writer = new PrintWriter("ParkingDetails.txt");

                for(int i = 0;i < denominationReportItems.size();i++)
                {

                    writer.println(denominationReportItems.get(i));

                }
                writer.close();

                JOptionPane.showMessageDialog(null, "Payment successful", " ",JOptionPane.INFORMATION_MESSAGE);

            }catch(java.io.IOException e){

                JOptionPane.showMessageDialog(null, e.getMessage(), "Error",JOptionPane.ERROR_MESSAGE);
            }

        }
    }//GEN-LAST:event_buttonClientPayActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //clear contents
        if(JOptionPane.showConfirmDialog(null,"Do you want to delete contents", "Parking Meter Simulation", JOptionPane.YES_NO_OPTION)==JOptionPane.YES_NO_OPTION){
            JOptionPane.showMessageDialog(null,"Contents Cleared");
            textAreaPaymentBreakdown.selectAll();
            textAreaPaymentBreakdown.setText("");
            textFieldTotalPayment.setText("");
            spinnerCents10.setValue(0);
            spinnerCents20.setValue(0);
            spinnerCents50.setValue(0);
            spinnerRand1.setValue(0);
            spinnerRand2.setValue(0);
            spinnerRand5.setValue(0);
            spinnerRand10.setValue(0);
            spinnerRand20.setValue(0);
            spinnerRand50.setValue(0);
            spinnerRand100.setValue(0);
            spinnerRand200.setValue(0);
            Table tableForm = new Table();
            
            textInputPaymentFee.setText("R ");

        }else{

        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void ButtonCalcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonCalcActionPerformed
        Date firstDate = (Date) jSpinner1.getModel().getValue();
        Date secondDate = (Date) jSpinner2.getModel().getValue();

        long timeDifference = secondDate.getTime() - firstDate.getTime();
        long differenceInDays = timeDifference/(24*60*1000) ;
        long parkingDurationHours = timeDifference/(60*60*1000)+1;
        long parkingDurationMinutes = timeDifference/(60*1000)%60;
        
       

        if(parkingDurationHours==0 || parkingDurationHours==1){
            double amount= 0.00;
            paymentAmount=amount;
            textInputPaymentFee.setText("R ".concat(String.valueOf(amount)));
            JOptionPane.showMessageDialog(null, "NO PAYMENT REQUIRED");
        }else if(parkingDurationHours==2){
            double amount= 5;
            paymentAmount=amount;
            textInputPaymentFee.setText("R ".concat(String.valueOf(amount)));
        }else if(parkingDurationHours==3 ){
            double amount= 8.0;
            paymentAmount=amount;
            textInputPaymentFee.setText("R ".concat(String.valueOf(amount)));
        }else if(parkingDurationHours==4 ||parkingDurationHours==5){
            double amount= 11.0;
            paymentAmount=amount;
            textInputPaymentFee.setText("R ".concat(String.valueOf(amount)));
        }else if(parkingDurationHours==6 || parkingDurationHours==9){
            double amount= 14.0;
            paymentAmount=amount;
            textInputPaymentFee.setText("R ".concat(String.valueOf(amount)));

        }else if(parkingDurationHours==10 || parkingDurationHours==19){
            double amount= 25.0;
            paymentAmount=amount;
            textInputPaymentFee.setText("R ".concat(String.valueOf(amount)));

        }else if(parkingDurationHours==20 ||parkingDurationHours==23){
            double amount= 35.0;
            paymentAmount=amount;
            textInputPaymentFee.setText("R ".concat(String.valueOf(amount)));
        }else if(parkingDurationHours==24 || parkingDurationHours > 24){
            double amount= 50.0;
            paymentAmount=amount;
            textInputPaymentFee.setText("R ".concat(String.valueOf(amount)));
        }else  if( firstDate.getTime()>secondDate.getTime()){
              JOptionPane.showMessageDialog(null, "Entry Time can not be greater than the Exit Time.", "Error",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_ButtonCalcActionPerformed

    private void showClientPayment(int centsTotal) {
        textFieldTotalPayment.setText(String.format("R "+ "%6d.%02d", centsTotal / 100, centsTotal % 100));
        //textAreaPaymentBreakdown.append("Denominations:\n");
    }

    private void addPaymentLine(String denomination, int quantity) {
        //String.format("the %s jumped over the %s, %d times", "cow", "moon", 2);
         
       String denominationTransactionDescription = String.format("%01d x R %s ", quantity, denomination);
       // denominationReportItems.add(denominationTransactionDescription);
    }

    public int calculateClientPayment() {
        int result = 0;
        if ((clientPayDenominationsMap != null) && (clientPayDenominationsMap.size() > 0)) {
            Set<String> denominationKeys = clientPayDenominationsMap.keySet();
            if (denominationKeys != null) {
                for (String keyItem : denominationKeys) {
                    Integer quantity = clientPayDenominationsMap.get(keyItem);
                    switch (keyItem) {
                        case "0.10":{
                           result += quantity * 10;
                            break; 
                        }
                        case "0.20":{
                            result += quantity * 20;
                            break;
                        }
                        case "0.50": {
                            result += quantity * 50;
                            break;
                        }
                        case "1.00": {
                            result += quantity * 100;
                            break;
                        }
                        case "2.00": {
                            result += quantity * 200;
                            break;
                        }
                        case "5.00": {
                            result += quantity * 500;
                            break;
                        }
                        case "10.00": {
                            result += quantity * 1000;
                            break;
                        }
                        case "20.00": {
                            result += quantity * 2000;
                            break;
                        }
                        case "50.00": {
                            result += quantity * 5000;
                            break;
                        }
                        case "100.00":{
                            result += quantity * 10000;
                            break;
                        }case "200.00":{
                            result += quantity * 20000;
                            break;
                        }
                        default:
                            break;
                    }
                }
            }
        }
        return result;
    }
    
    

    public void displayClientPaymentDenominations(HashMap<String, Integer> cltPaymentDenominations) {
        if (cltPaymentDenominations != null) {
            Set<String> denominationKeys = cltPaymentDenominations.keySet();
            if (denominationKeys != null) {
                SortedSet<String> sortedDenominationKeys = new TreeSet<>(denominationKeys);
                for (String keyItem : sortedDenominationKeys) {
                    Integer quantity = clientPayDenominationsMap.get(keyItem);
                    if (quantity > 0) {
                        switch (keyItem) {
                            case "0.50": {
                                addPaymentLine("0.50", quantity);
                                break;
                            }
                            case "1.00": {
                                addPaymentLine("1.00", quantity);
                                break;
                            }
                            case "2.00": {
                                addPaymentLine("2.00", quantity);
                                break;
                            }
                            case "5.00": {
                                addPaymentLine("5.00", quantity);
                                break;
                            }
                            case "10.00": {
                                addPaymentLine("10.00", quantity);
                                break;
                            }
                            case "20.00": {
                                addPaymentLine("20.00", quantity);
                                break;
                            }
                            case "50.00": {
                                addPaymentLine("50.00", quantity);
                                break;
                            }case"100.00":{
                                addPaymentLine("100.00", quantity);
                                break;
                            }
                            case "200.00":{
                                addPaymentLine("200.00", quantity);
                                break;
                            }
                        
                            default:
                                break;
                        }
                    }
                }
                if ((denominationReportItems != null) && (denominationReportItems.size() > 0)) {
                    for (String a : denominationReportItems) {
                        textAreaPaymentBreakdown.append(a + "\n");
                    }
                }
            }
        }
         textAreaPaymentBreakdown.append("");
         
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Admin;
    private javax.swing.JButton ButtonCalc;
    private javax.swing.JButton buttonClientPay;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JLabel labelDenomCents50;
    private javax.swing.JLabel labelDenomCents51;
    private javax.swing.JLabel labelDenomCents52;
    private javax.swing.JLabel labelDenomRand1;
    private javax.swing.JLabel labelDenomRand10;
    private javax.swing.JLabel labelDenomRand2;
    private javax.swing.JLabel labelDenomRand20;
    private javax.swing.JLabel labelDenomRand5;
    private javax.swing.JLabel labelDenomRand50;
    private javax.swing.JLabel labelDenomRand51;
    private javax.swing.JLabel labelDenomRand52;
    private javax.swing.JPanel panelClientPayment;
    private javax.swing.JSpinner spinnerCents10;
    private javax.swing.JSpinner spinnerCents20;
    private javax.swing.JSpinner spinnerCents50;
    private javax.swing.JSpinner spinnerRand1;
    private javax.swing.JSpinner spinnerRand10;
    private javax.swing.JSpinner spinnerRand100;
    private javax.swing.JSpinner spinnerRand2;
    private javax.swing.JSpinner spinnerRand20;
    private javax.swing.JSpinner spinnerRand200;
    private javax.swing.JSpinner spinnerRand5;
    private javax.swing.JSpinner spinnerRand50;
    private java.awt.TextArea textAreaPaymentBreakdown;
    private javax.swing.JTextField textFieldTotalPayment;
    private javax.swing.JTextField textInputPaymentFee;
    // End of variables declaration//GEN-END:variables
}
